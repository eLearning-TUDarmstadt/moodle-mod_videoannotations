<div id="annotations" data-region="annotation-list">
	<div id="annotationsloader" style="visibility: hidden; margin: auto; height: 0px; position: relative; left: 50%; transform: translateX(-50%); display: inline-block;">{{# pix}} i/loading, core, {{/pix}}</div>
	<h3>Annotationen</h3>
	{{#annotations}}
		{{> mod_videoannotations/annotation}}
	{{/annotations}}
</div>

{{#js}}


    require(['mod_videoannotations/annotations', 'core/ajax', 'jquery', 'core/templates'], function(a, ajax, $, templates) {
		var modinstance = $("#newannotation_modinstance").val();
		var timer = Rx.Observable.timer(0,1000);

		// Delete Annotationen
		var deleteButton = Rx.Observable.fromEvent($('.deleteAnnotationButton'), 'click')
			.pluck('currentTarget')
			.flatMap(btn => {
				var annotationId = $(btn).attr('annotationid');
				return Rx.Observable.from([annotationId]);
			})
			.flatMap(id => {
				var p = ajax.call([{
					methodname: 'mod_videoannotations_delete_annotation',
					args: { annotationid: id }
				}]);
				return Rx.Observable.fromPromise(p[0]);
			})
			.startWith(null);

		// Get annotations
    	var annotations = Rx.Observable
		.combineLatest(timer, deleteButton)
		.flatMap(function() {
			var p = ajax.call([{
				methodname: 'mod_videoannotations_get_annotations',
				args: { id: modinstance }
			}]);
			return Rx.Observable.fromPromise(p[0]);
		});
		
		var newOrModifiedAnnotations = 
			annotations.flatMap(function(rawdata) {
				return Rx.Observable.from(rawdata);
			})
			.distinct();

		var newAnnotations = 
			newOrModifiedAnnotations.filter(function(o) {
				return $('#annotation-id-' + o.id).length === 0;
			})
			.flatMap(function(o) {
				var p = templates.render('mod_videoannotations/annotation', o);
				return Rx.Observable.fromPromise(p);
			})
			.subscribe(function (html) {
				$("#annotations").append(html);
			})
		
		/*
		var modifiedAnnotations =
			newOrModifiedAnnotations.filter(function(o) {
				return $('#annotation-id-' + o.id).length !== 0;
			})
			.flatMap(function (o) {
				var input = $("#newcomment_text_" + o.id);
				var selectionStart = input.prop('selectionStart');
				var selectionEnd = input.prop('selectionEnd');
				var focus = $(input).is(":focus");

				var p = templates.render('mod_videoannotations/annotation', o);

				p.then(function(html) {

				});
			})
			.flatMap(function (obj) {
				console.log(obj);
				return Rx.Observable.from(obj);
			})
			.subscribe(function (o) {
				console.log(o);
			});
		*/
	a.createNewCommentListener();
		

		/*
		var modinstance = $("#newannotation_modinstance").val();

				.on('click', function () {
					deleteAnnotation(annotationid).done(function () {
						rerenderAnnotationList(modinstance);
					});
				});

        a.deleteAnnotationListener();
		*/
		/*
        a.deleteCommentListener();
		a.createNewCommentListener();
		a.likeListener();
		a.unlikeListener();
		*/
    });
{{/js}}